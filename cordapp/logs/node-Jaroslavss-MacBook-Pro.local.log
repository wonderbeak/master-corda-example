[INFO ] 2019-05-21T15:14:20,134Z [Test worker] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.template in file:/Users/mordor/IdeaProjects/corda-tut2-solution-kotlin/cordapp/build/classes/kotlin/test/com/template: build/tmp/generated-test-cordapps/com.template-0d423a65-836f-4ab9-954a-28f47500521d.jar {}
[INFO ] 2019-05-21T15:14:20,635Z [Test worker] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.template in file:/Users/mordor/IdeaProjects/corda-tut2-solution-kotlin/cordapp/build/classes/kotlin/main/com/template: build/tmp/generated-test-cordapps/com.template-b8e259a0-4a77-4ae3-a398-bbc625a43bf7.jar {}
[INFO ] 2019-05-21T15:14:20,685Z [Test worker] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/mordor/IdeaProjects/corda-tut2-solution-kotlin/cordapp/build/tmp/generated-test-cordapps/com.template-0d423a65-836f-4ab9-954a-28f47500521d.jar, rootPackageName=null), RestrictedURL(url=file:/Users/mordor/IdeaProjects/corda-tut2-solution-kotlin/cordapp/build/tmp/generated-test-cordapps/com.template-b8e259a0-4a77-4ae3-a398-bbc625a43bf7.jar, rootPackageName=null), RestrictedURL(url=file:/Users/mordor/IdeaProjects/corda-tut2-solution-kotlin/cordapp-contracts-states/build/libs/cordapp-contracts-states-0.1.jar, rootPackageName=com.template) {}
[INFO ] 2019-05-21T15:14:20,781Z [Test worker] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/mordor/IdeaProjects/corda-tut2-solution-kotlin/cordapp/build/tmp/generated-test-cordapps/com.template-0d423a65-836f-4ab9-954a-28f47500521d.jar {}
[INFO ] 2019-05-21T15:14:20,964Z [Test worker] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/mordor/IdeaProjects/corda-tut2-solution-kotlin/cordapp/build/tmp/generated-test-cordapps/com.template-b8e259a0-4a77-4ae3-a398-bbc625a43bf7.jar {}
[INFO ] 2019-05-21T15:14:21,004Z [Test worker] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/mordor/IdeaProjects/corda-tut2-solution-kotlin/cordapp-contracts-states/build/libs/cordapp-contracts-states-0.1.jar {}
[WARN ] 2019-05-21T15:14:21,164Z [Test worker] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-05-21T15:14:26,557Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-05-21T15:14:26,566Z [Test worker] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-05-21T15:14:26,657Z [Test worker] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@9b8cbab {}
[INFO ] 2019-05-21T15:14:27,375Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-05-21T15:14:27,435Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-05-21T15:14:27,441Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-05-21T15:14:29,514Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-05-21T15:14:30,217Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-05-21T15:14:30,220Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1558451670219) {}
[INFO ] 2019-05-21T15:14:30,233Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-21T15:14:30,339Z [Test worker] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1558451670219) {}
[INFO ] 2019-05-21T15:14:30,342Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1558451670219) {}
[INFO ] 2019-05-21T15:14:30,561Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment 7DD0B1B74A093B13FD23B7BD385099D6B93A55B4D5A9BEE28B47A337BD0ABE42 {}
[WARN ] 2019-05-21T15:14:30,563Z [Test worker] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-05-21T15:14:30,667Z [Test worker] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[INFO ] 2019-05-21T15:14:30,797Z [Test worker] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.template.IOUFlow to initiate com.template.IOUFlowResponder (version 1) {}
[WARN ] 2019-05-21T15:14:30,848Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key F075C25746D0C759D3BFE6924DB10434E4018BE44DD39261C47D6E82F8F0899D, not inserting the second time {}
[INFO ] 2019-05-21T15:14:30,928Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1558451670219) {}
[INFO ] 2019-05-21T15:14:30,956Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-21T15:14:30,958Z [Test worker] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1558451670219) {}
[INFO ] 2019-05-21T15:14:30,961Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1558451670219) {}
[INFO ] 2019-05-21T15:14:30,964Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-21T15:14:30,967Z [Test worker] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1558451670219) {}
[INFO ] 2019-05-21T15:14:30,976Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-05-21T15:14:30,981Z [Test worker] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-05-21T15:14:31,008Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-05-21T15:14:31,022Z [Test worker] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@149b508e {}
[INFO ] 2019-05-21T15:14:31,039Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-05-21T15:14:31,042Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-05-21T15:14:31,045Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-05-21T15:14:31,188Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-05-21T15:14:31,201Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-05-21T15:14:31,203Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1558451671203) {}
[INFO ] 2019-05-21T15:14:31,212Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-21T15:14:31,221Z [Test worker] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1558451671203) {}
[INFO ] 2019-05-21T15:14:31,224Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1558451671203) {}
[INFO ] 2019-05-21T15:14:31,349Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment 7DD0B1B74A093B13FD23B7BD385099D6B93A55B4D5A9BEE28B47A337BD0ABE42 {}
[WARN ] 2019-05-21T15:14:31,352Z [Test worker] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-05-21T15:14:31,366Z [Test worker] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.template.IOUFlow to initiate com.template.IOUFlowResponder (version 1) {}
[WARN ] 2019-05-21T15:14:31,380Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 2D51AACF7160530FA6A214A325A5B7A51784644DD71925AA2B46EBEB89467C09, not inserting the second time {}
[INFO ] 2019-05-21T15:14:31,390Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1558451670219) {}
[INFO ] 2019-05-21T15:14:31,395Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-21T15:14:31,409Z [Test worker] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1558451670219) {}
[INFO ] 2019-05-21T15:14:31,411Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1558451671203) {}
[INFO ] 2019-05-21T15:14:31,416Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-21T15:14:31,433Z [Test worker] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1558451671203) {}
[INFO ] 2019-05-21T15:14:31,436Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1558451671203) {}
[INFO ] 2019-05-21T15:14:31,445Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-21T15:14:31,449Z [Test worker] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1558451671203) {}
[INFO ] 2019-05-21T15:14:31,452Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1558451671203) {}
[INFO ] 2019-05-21T15:14:31,455Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-21T15:14:31,458Z [Test worker] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1558451671203) {}
[INFO ] 2019-05-21T15:14:31,464Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-05-21T15:14:31,468Z [Test worker] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-05-21T15:14:31,496Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-05-21T15:14:31,509Z [Test worker] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@ebb26bf {}
[INFO ] 2019-05-21T15:14:31,527Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-05-21T15:14:31,530Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-05-21T15:14:31,533Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-05-21T15:14:31,663Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-05-21T15:14:31,674Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-05-21T15:14:31,677Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1558451671677) {}
[INFO ] 2019-05-21T15:14:31,690Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-21T15:14:31,698Z [Test worker] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1558451671677) {}
[INFO ] 2019-05-21T15:14:31,701Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1558451671677) {}
[INFO ] 2019-05-21T15:14:31,820Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment 7DD0B1B74A093B13FD23B7BD385099D6B93A55B4D5A9BEE28B47A337BD0ABE42 {}
[WARN ] 2019-05-21T15:14:31,822Z [Test worker] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-05-21T15:14:31,835Z [Test worker] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.template.IOUFlow to initiate com.template.IOUFlowResponder (version 1) {}
[WARN ] 2019-05-21T15:14:31,850Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key B4B897A33A231C6A8BAB1E85E0AAE0E7A758FE5459CCDC0F79ED6EBB0264BB4A, not inserting the second time {}
[INFO ] 2019-05-21T15:14:31,859Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1558451670219) {}
[INFO ] 2019-05-21T15:14:31,863Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-21T15:14:31,879Z [Test worker] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1558451670219) {}
[INFO ] 2019-05-21T15:14:31,881Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1558451671677) {}
[INFO ] 2019-05-21T15:14:31,885Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-21T15:14:31,899Z [Test worker] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1558451671677) {}
[INFO ] 2019-05-21T15:14:31,901Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1558451671203) {}
[INFO ] 2019-05-21T15:14:31,906Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-21T15:14:31,926Z [Test worker] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1558451671203) {}
[INFO ] 2019-05-21T15:14:31,928Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1558451671677) {}
[INFO ] 2019-05-21T15:14:31,932Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-21T15:14:31,947Z [Test worker] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1558451671677) {}
[INFO ] 2019-05-21T15:14:31,949Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1558451671677) {}
[INFO ] 2019-05-21T15:14:31,957Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-21T15:14:31,959Z [Test worker] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1558451671677) {}
[INFO ] 2019-05-21T15:14:31,961Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1558451671677) {}
[INFO ] 2019-05-21T15:14:31,963Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-21T15:14:31,966Z [Test worker] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1558451671677) {}
[INFO ] 2019-05-21T15:40:44,047Z [Test worker] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.template in file:/Users/mordor/IdeaProjects/master-corda-example/cordapp/build/classes/kotlin/test/com/template: build/tmp/generated-test-cordapps/com.template-bda5ceaa-d630-493a-b886-c03370537dc5.jar {}
[INFO ] 2019-05-21T15:40:44,469Z [Test worker] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.template in file:/Users/mordor/IdeaProjects/master-corda-example/cordapp/build/classes/kotlin/main/com/template: build/tmp/generated-test-cordapps/com.template-3ff4d8cd-08c6-4e6e-a5ab-62b154ab4ec3.jar {}
[INFO ] 2019-05-21T15:40:44,508Z [Test worker] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/mordor/IdeaProjects/master-corda-example/cordapp/build/tmp/generated-test-cordapps/com.template-bda5ceaa-d630-493a-b886-c03370537dc5.jar, rootPackageName=null), RestrictedURL(url=file:/Users/mordor/IdeaProjects/master-corda-example/cordapp/build/tmp/generated-test-cordapps/com.template-3ff4d8cd-08c6-4e6e-a5ab-62b154ab4ec3.jar, rootPackageName=null), RestrictedURL(url=file:/Users/mordor/IdeaProjects/master-corda-example/cordapp-contracts-states/build/libs/cordapp-contracts-states-0.1.jar, rootPackageName=com.template) {}
[INFO ] 2019-05-21T15:40:44,589Z [Test worker] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/mordor/IdeaProjects/master-corda-example/cordapp/build/tmp/generated-test-cordapps/com.template-bda5ceaa-d630-493a-b886-c03370537dc5.jar {}
[INFO ] 2019-05-21T15:40:44,747Z [Test worker] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/mordor/IdeaProjects/master-corda-example/cordapp/build/tmp/generated-test-cordapps/com.template-3ff4d8cd-08c6-4e6e-a5ab-62b154ab4ec3.jar {}
[INFO ] 2019-05-21T15:40:44,802Z [Test worker] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/mordor/IdeaProjects/master-corda-example/cordapp-contracts-states/build/libs/cordapp-contracts-states-0.1.jar {}
[WARN ] 2019-05-21T15:40:44,955Z [Test worker] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-05-21T15:40:50,021Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-05-21T15:40:50,025Z [Test worker] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-05-21T15:40:50,114Z [Test worker] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@12c44f78 {}
[INFO ] 2019-05-21T15:40:50,769Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-05-21T15:40:50,813Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-05-21T15:40:50,819Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-05-21T15:40:53,009Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-05-21T15:40:53,765Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-05-21T15:40:53,768Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1558453253768) {}
[INFO ] 2019-05-21T15:40:53,781Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-21T15:40:53,901Z [Test worker] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1558453253768) {}
[INFO ] 2019-05-21T15:40:53,904Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1558453253768) {}
[INFO ] 2019-05-21T15:40:54,168Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment FE90F95ED420812CB1B243E4165AB1B0A64A52C638C9041EF9FF47AEC8CAFDB5 {}
[WARN ] 2019-05-21T15:40:54,173Z [Test worker] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-05-21T15:40:54,306Z [Test worker] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[INFO ] 2019-05-21T15:40:54,469Z [Test worker] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.template.IOUFlow to initiate com.template.IOUFlowResponder (version 1) {}
[WARN ] 2019-05-21T15:40:54,530Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 541C23BA05171E42687CD461AB32BC6A32F152103E3C7E300E5EBE719794356C, not inserting the second time {}
[INFO ] 2019-05-21T15:40:54,617Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1558453253768) {}
[INFO ] 2019-05-21T15:40:54,648Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-21T15:40:54,650Z [Test worker] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1558453253768) {}
[INFO ] 2019-05-21T15:40:54,652Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1558453253768) {}
[INFO ] 2019-05-21T15:40:54,655Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-21T15:40:54,658Z [Test worker] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1558453253768) {}
[INFO ] 2019-05-21T15:40:54,665Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-05-21T15:40:54,669Z [Test worker] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-05-21T15:40:54,694Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-05-21T15:40:54,708Z [Test worker] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@788b3eff {}
[INFO ] 2019-05-21T15:40:54,723Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-05-21T15:40:54,726Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-05-21T15:40:54,729Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-05-21T15:40:54,875Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-05-21T15:40:54,887Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-05-21T15:40:54,889Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1558453254889) {}
[INFO ] 2019-05-21T15:40:54,897Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-21T15:40:54,905Z [Test worker] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1558453254889) {}
[INFO ] 2019-05-21T15:40:54,908Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1558453254889) {}
[INFO ] 2019-05-21T15:40:55,029Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment FE90F95ED420812CB1B243E4165AB1B0A64A52C638C9041EF9FF47AEC8CAFDB5 {}
[WARN ] 2019-05-21T15:40:55,031Z [Test worker] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-05-21T15:40:55,046Z [Test worker] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.template.IOUFlow to initiate com.template.IOUFlowResponder (version 1) {}
[WARN ] 2019-05-21T15:40:55,061Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key B4C996227E128E64C241E56E86ACBDB78223FC61F1FF16B876DC6EAA52523B22, not inserting the second time {}
[INFO ] 2019-05-21T15:40:55,072Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1558453253768) {}
[INFO ] 2019-05-21T15:40:55,076Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-21T15:40:55,089Z [Test worker] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1558453253768) {}
[INFO ] 2019-05-21T15:40:55,090Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1558453254889) {}
[INFO ] 2019-05-21T15:40:55,094Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-21T15:40:55,108Z [Test worker] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1558453254889) {}
[INFO ] 2019-05-21T15:40:55,110Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1558453254889) {}
[INFO ] 2019-05-21T15:40:55,117Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-21T15:40:55,119Z [Test worker] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1558453254889) {}
[INFO ] 2019-05-21T15:40:55,121Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1558453254889) {}
[INFO ] 2019-05-21T15:40:55,123Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-21T15:40:55,126Z [Test worker] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1558453254889) {}
[INFO ] 2019-05-21T15:40:55,130Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-05-21T15:40:55,132Z [Test worker] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-05-21T15:40:55,154Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-05-21T15:40:55,164Z [Test worker] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@2c44728c {}
[INFO ] 2019-05-21T15:40:55,176Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-05-21T15:40:55,178Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-05-21T15:40:55,180Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-05-21T15:40:55,313Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-05-21T15:40:55,324Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-05-21T15:40:55,326Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1558453255326) {}
[INFO ] 2019-05-21T15:40:55,332Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-21T15:40:55,340Z [Test worker] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1558453255326) {}
[INFO ] 2019-05-21T15:40:55,342Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1558453255326) {}
[INFO ] 2019-05-21T15:40:55,459Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment FE90F95ED420812CB1B243E4165AB1B0A64A52C638C9041EF9FF47AEC8CAFDB5 {}
[WARN ] 2019-05-21T15:40:55,461Z [Test worker] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-05-21T15:40:55,473Z [Test worker] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered com.template.IOUFlow to initiate com.template.IOUFlowResponder (version 1) {}
[WARN ] 2019-05-21T15:40:55,486Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 5829DF5EF87E9AB605C49BD0E4B19ADA960D91586CFF6D02612E3956BB5AB683, not inserting the second time {}
[INFO ] 2019-05-21T15:40:55,496Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1558453253768) {}
[INFO ] 2019-05-21T15:40:55,499Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-21T15:40:55,512Z [Test worker] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1558453253768) {}
[INFO ] 2019-05-21T15:40:55,514Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1558453255326) {}
[INFO ] 2019-05-21T15:40:55,517Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-21T15:40:55,530Z [Test worker] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1558453255326) {}
[INFO ] 2019-05-21T15:40:55,532Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1558453254889) {}
[INFO ] 2019-05-21T15:40:55,535Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-21T15:40:55,550Z [Test worker] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=1, serial=1558453254889) {}
[INFO ] 2019-05-21T15:40:55,552Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1558453255326) {}
[INFO ] 2019-05-21T15:40:55,556Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-05-21T15:40:55,571Z [Test worker] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1558453255326) {}
[INFO ] 2019-05-21T15:40:55,573Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1558453255326) {}
[INFO ] 2019-05-21T15:40:55,580Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-21T15:40:55,581Z [Test worker] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1558453255326) {}
[INFO ] 2019-05-21T15:40:55,583Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1558453255326) {}
[INFO ] 2019-05-21T15:40:55,585Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-05-21T15:40:55,587Z [Test worker] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=1, serial=1558453255326) {}
